
## Create a special "matrix" object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {
        inver <- NULL
        set <- function(y) {
                x <<- y
                inver <<- NULL
        }
        get <- function() x
        setinverse <- function(inverse) inver <<- inverse
        getinverse <- function() inver
        list(set = set,
             get = get,
             setinverse = setinverse,
             getinverse = getinverse)
}


##this function calculates inverse of special object "matrix" created by makeCachematrix above
##If the inverse is already calculate, it retrieves the inverse from cache

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        inv <- x$getinverse()
        if (!is.null(inv)) {
                message("getting cached data")
                return(inv)
        }
        mat <- x$get()
        inver <- solve(mat, ...)
        x$setinverse(inver)
        inver
}
